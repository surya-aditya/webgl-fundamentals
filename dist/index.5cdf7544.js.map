{"mappings":"AAAA,SAAS,cAAc,GAAE,EAAE,YAAY,EAAE,UAAU,EAAE;IACnD,2BAA2B;IAC3B,IAAI,SAAS,IAAG,YAAY,CAAC;IAE7B,8BAA8B;IAC9B,IAAG,YAAY,CAAC,QAAQ;IAExB,qBAAqB;IACrB,IAAG,aAAa,CAAC;IAEjB,uBAAuB;IACvB,IAAI,UAAU,IAAG,kBAAkB,CAAC,QAAQ,IAAG,cAAc;IAC7D,IAAI,CAAC,SACH,yDAAyD;IACzD,MAAM,8BAA8B,IAAG,gBAAgB,CAAC,QAAQ;IAGlE,OAAO;AACT;AAEA,SAAS,cAAc,GAAE,EAAE,YAAY,EAAE,cAAc,EAAE;IACvD,oBAAoB;IACpB,IAAI,UAAU,IAAG,aAAa;IAE9B,sBAAsB;IACtB,IAAG,YAAY,CAAC,SAAS;IACzB,IAAG,YAAY,CAAC,SAAS;IAEzB,oBAAoB;IACpB,IAAG,WAAW,CAAC;IAEf,sBAAsB;IACtB,IAAI,UAAU,IAAG,mBAAmB,CAAC,SAAS,IAAG,WAAW;IAC5D,IAAI,CAAC,SACD,qCAAqC;IACrC,MAAO,4BAA4B,IAAG,iBAAiB,CAAE,SAAU;IAGvE,OAAO;AACT;AAEA,SAAS,uBAAuB,GAAE,EAAE,QAAQ,EAAE,cAAc,EAAE;IAC5D,gCAAgC;IAChC,IAAI,eAAe,SAAS,cAAc,CAAC;IAC3C,IAAI,CAAC,cACH,MAAM,sCAAsC,SAAU;IAGxD,0CAA0C;IAC1C,IAAI,eAAe,aAAa,IAAI;IAEpC,mDAAmD;IACnD,kBAAkB;IAClB,IAAI,CAAC,gBAAgB;QACnB,IAAI,aAAa,IAAI,IAAI,qBACvB,iBAAiB,IAAG,aAAa;aAC5B,IAAI,aAAa,IAAI,IAAI,uBAC9B,iBAAiB,IAAG,eAAe;aAC9B,IAAI,CAAC,gBACV,MAAM,iCAAkC;IAE5C,CAAC;IAED,OAAO,cAAc,KAAI,cAAc;AACzC;AAEA,IAAI,SAAS,wBAAwB,IAAI","sources":["webgl/src/scripts/index.js"],"sourcesContent":["function compileShader(gl, shaderSource, shaderType) {\n  // Create the shader object\n  var shader = gl.createShader(shaderType);\n \n  // Set the shader source code.\n  gl.shaderSource(shader, shaderSource);\n \n  // Compile the shader\n  gl.compileShader(shader);\n \n  // Check if it compiled\n  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (!success) {\n    // Something went wrong during compilation; get the error\n    throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n  }\n \n  return shader;\n}\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n  // create a program.\n  var program = gl.createProgram();\n \n  // attach the shaders.\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n \n  // link the program.\n  gl.linkProgram(program);\n \n  // Check if it linked.\n  var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!success) {\n      // something went wrong with the link\n      throw (\"program failed to link:\" + gl.getProgramInfoLog (program));\n  }\n \n  return program;\n};\n\nfunction createShaderFromScript(gl, scriptId, opt_shaderType) {\n  // look up the script tag by id.\n  var shaderScript = document.getElementById(scriptId);\n  if (!shaderScript) {\n    throw(\"*** Error: unknown script element\" + scriptId);\n  }\n \n  // extract the contents of the script tag.\n  var shaderSource = shaderScript.text;\n \n  // If we didn't pass in a type, use the 'type' from\n  // the script tag.\n  if (!opt_shaderType) {\n    if (shaderScript.type == \"x-shader/x-vertex\") {\n      opt_shaderType = gl.VERTEX_SHADER;\n    } else if (shaderScript.type == \"x-shader/x-fragment\") {\n      opt_shaderType = gl.FRAGMENT_SHADER;\n    } else if (!opt_shaderType) {\n      throw(\"*** Error: shader type not set\");\n    }\n  }\n \n  return compileShader(gl, shaderSource, opt_shaderType);\n};\n\nvar shader = compileShaderFromScript(gl, \"someScriptTagId\");"],"names":[],"version":3,"file":"index.5cdf7544.js.map","sourceRoot":"/__parcel_source_root/"}